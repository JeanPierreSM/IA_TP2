/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.grupouno.ia_tp2;

import com.sun.glass.events.KeyEvent;
import java.awt.Color;
import java.util.ArrayList;
import java.util.Date;
import java.util.StringTokenizer;
import javax.swing.JOptionPane;
import org.apache.commons.lang3.StringUtils;

/**
 *
 * @author Julian
 */
public class MainFrame extends javax.swing.JFrame {

    private Asistente asistente;

    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
    }

    public MainFrame(Asistente asistente) {
        initComponents();
        this.asistente = asistente;
        this.inputArea.requestFocus();
        this.sugeridosArea.setEnabled(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler2 = new javax.swing.Box.Filler(new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 0), new java.awt.Dimension(20, 32767));
        filler3 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 20), new java.awt.Dimension(0, 20), new java.awt.Dimension(32767, 20));
        jScrollPane1 = new javax.swing.JScrollPane();
        outputArea = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        inputArea = new javax.swing.JTextArea();
        sendButton = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        detectadasArea = new javax.swing.JTextArea();
        detectadasAreaLabel = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        sugeridosArea = new javax.swing.JTextArea();
        sugeridosLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Asistente Virtual");
        setResizable(false);

        outputArea.setEditable(false);
        outputArea.setBackground(new java.awt.Color(211, 211, 211));
        outputArea.setColumns(20);
        outputArea.setForeground(new java.awt.Color(220, 20, 60));
        outputArea.setRows(5);
        jScrollPane1.setViewportView(outputArea);

        inputArea.setColumns(20);
        inputArea.setRows(5);
        inputArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                inputAreaKeyTyped(evt);
            }
        });
        jScrollPane2.setViewportView(inputArea);

        sendButton.setFont(new java.awt.Font("Dialog", 1, 24)); // NOI18N
        sendButton.setText("Enviar");
        sendButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendButtonActionPerformed(evt);
            }
        });

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        detectadasArea.setEditable(false);
        detectadasArea.setBackground(new java.awt.Color(211, 211, 211));
        detectadasArea.setColumns(20);
        detectadasArea.setRows(5);
        jScrollPane3.setViewportView(detectadasArea);

        detectadasAreaLabel.setText("Caracteristicas solicitadas:");

        jScrollPane4.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        sugeridosArea.setEditable(false);
        sugeridosArea.setBackground(new java.awt.Color(211, 211, 211));
        sugeridosArea.setColumns(20);
        sugeridosArea.setRows(5);
        sugeridosArea.setWrapStyleWord(true);
        sugeridosArea.setEnabled(false);
        jScrollPane4.setViewportView(sugeridosArea);

        sugeridosLabel.setText("Productos sugeridos:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(388, 388, 388)
                .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(428, 428, 428))
            .addGroup(layout.createSequentialGroup()
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 624, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(detectadasAreaLabel)))
                    .addComponent(jScrollPane2))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(sugeridosLabel)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addComponent(sugeridosLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(detectadasAreaLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 249, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(filler1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(104, 104, 104)
                        .addComponent(filler2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(19, 19, 19))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(sendButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(filler3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sendButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendButtonActionPerformed

        if (this.inputArea.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "¡No puedes enviar mensajes vacíos!");
            this.inputArea.setText("");
        } else {
            send();
        }
    }//GEN-LAST:event_sendButtonActionPerformed

    private void send() {
        String input = this.inputArea.getText();
        this.inputArea.setText("");
        escribirUsuario(input);
        if (asistente.getPreguntaSiNo() != null) {
            detectarRespuestaSiNo(input);
        } else {
            detectarCaracteristicas(input);
        }
        actualizarSugeridos();
        responder(input);
    }

    private void inputAreaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_inputAreaKeyTyped
        if (evt.getKeyChar() == KeyEvent.VK_ENTER) {

            if (this.inputArea.getText().length() == 1) {
                JOptionPane.showMessageDialog(null, "¡No puedes enviar mensajes vacíos!");
                this.inputArea.setText("");
            } else {
                send();
            }

        }
    }//GEN-LAST:event_inputAreaKeyTyped
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea detectadasArea;
    private javax.swing.JLabel detectadasAreaLabel;
    private javax.swing.Box.Filler filler1;
    private javax.swing.Box.Filler filler2;
    private javax.swing.Box.Filler filler3;
    private javax.swing.JTextArea inputArea;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextArea outputArea;
    private javax.swing.JButton sendButton;
    private javax.swing.JTextArea sugeridosArea;
    private javax.swing.JLabel sugeridosLabel;
    // End of variables declaration//GEN-END:variables

    private void actualizarSugeridos() {
        ArrayList<Producto> ar = asistente.getSugeridos();
        if (!ar.isEmpty()) {
            if (ar.size() == 1) {
                this.sugeridosArea.setText(ar.get(0).getNombre());
            } else {
                String t = ar.get(0).getNombre();
                for (int i = 1; i < ar.size(); i++) {
                    t += "\n" + ar.get(i).getNombre();
                }
                this.sugeridosArea.setText(t);
            }
            this.sugeridosArea.setEnabled(true);
        } else {
            this.sugeridosArea.setText("");
            this.sugeridosArea.setEnabled(false);
        }
    }

    private void responder(String input) {
        String respuesta = asistente.getRespuesta(input);
        escribirAgente(respuesta);
    }

    private void detectarCaracteristicas(String input) {
        StringTokenizer tokenizer = new StringTokenizer(input);

        while (tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken();
            //Se pasa el token y se compara con el listado y sus sinonimos
            token = asistente.esPalabraClave(token);
            if (token != null) {
                //Si está presente, se escribe en Title Case en la lista de 
                //requerimientos
                token = StringUtils.capitalize(token);
                String text = this.detectadasArea.getText();
                if (text.isEmpty()) {
                    this.detectadasArea.setText(token);
                } else {
                    if (!text.contains(token)) {
                        text += "\n" + token;
                        this.detectadasArea.setText(text);
                    }
                }
            }
        }
    }

    private void escribirUsuario(String input) {
        String text = this.outputArea.getText();
        if (!text.isEmpty()) {
            text += "\n\n";
        }
        Date d = new Date();
        text += " (" + d.toString() + ')' + " Usuario dijo: \n ";
        text += input;

        this.outputArea.setText(text);

    }

    private void escribirAgente(String respuesta) {
        String text = this.outputArea.getText();
        Date d = new Date();
        text += "\n (" + d.toString() + ')' + " Agente dijo: \n ";
        text += respuesta;
        this.outputArea.setText(text);
        this.outputArea.setForeground(Color.black);
    }

    private void detectarRespuestaSiNo(String input) {
        StringTokenizer tokenizer = new StringTokenizer(input);
        while (tokenizer.hasMoreTokens()) {
            String token = tokenizer.nextToken();
            //Se pasa el token y se compara con el listado y sus sinonimos
            token = asistente.esSiNo(token);
            if (token != null) {
                //Si está presente, se escribe en Title Case en la lista de 
                //requerimientos
                ArrayList<String> resultados;
                if ("si".equals(token)) {
                    resultados = asistente.getPreguntaSiNo().getIfSi();
                } else {
                    resultados = asistente.getPreguntaSiNo().getIfNo();
                }
                setCaracteristicasSiNo(resultados);
            }
        }
    }

    private void setCaracteristicasSiNo(ArrayList<String> resultados) {
        for (String resultado : resultados) {
            resultado = StringUtils.capitalize(resultado);
            String text = this.detectadasArea.getText();
            if (text.isEmpty()) {
                this.detectadasArea.setText(resultado);
            } else {
                if (!text.contains(resultado)) {
                    text += "\n" + resultado;
                    this.detectadasArea.setText(text);
                }
            }
        }
    }
}
